<?php

/**
 * @file
 * Contains wordfilter.module..
 */

use Drupal\Core\Link;
use \Drupal\Core\Url;
use \Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Config\Entity\ThirdPartySettingsInterface;

/**
 * Implements hook_help().
 */
function wordfilter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the wordfilter module.
    case 'help.page.wordfilter':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Apply word filtering on content via Wordfilter configurations.') . '</p>';
      $output .= '<h3>' . t('How to use') . '</h3>';
      $output .= '<p>' . t('You can create and manage Wordfilter configurations at the <a target="_blank" href=":url">Wordfilter configuration page</a>.', [':url' => '/admin/config/wordfilter_configuration']) . '</p>';
      $output .= '<p>' . t('For filtering on content\'s base fields like the title, you can enable Wordfilter configurations on your <a target="_blank" href=":url_node_type">Content types</a> and <a target="_blank" href=":url_comment_type">Comment types</a>.', [':url_node_type' => '/admin/structure/types', ':url_comment_type' => '/admin/structure/comment']) . '</p>';
      $output .= '<p>' . t('For filtering on various text fields, enable Wordfilter configurations on your <a target="_blank" href=":url">text formats</a>.', [':url' => '/admin/config/content/formats']) . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array &$form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param string $form_id
 */
function wordfilter_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  wordfilter_add_display_options_to_entity_form($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 
 * @param array &$form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param string $form_id
 */
function wordfilter_form_comment_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  wordfilter_add_display_options_to_entity_form($form, $form_state);
}

/**
 * Add wordfilter display options to a given entity form.
 * 
 * The corresponding entity class
 * must implement ThirdPartySettingsInterface.
 * 
 * @param array &$form
 *   The form array to add the display options.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function wordfilter_add_display_options_to_entity_form(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Config\Entity\ThirdPartySettingsInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();
  $account = \Drupal::currentUser();

  if (!($entity instanceof ThirdPartySettingsInterface)) {
    return;
  }
  
  if (empty($form['display'])) {
    $form['display'] = [
      '#type' => 'details',
      '#title' => t('Display settings'),
      '#group' => 'additional_settings',
    ];
  }
  
  $storage = \Drupal::entityTypeManager()->getStorage('wordfilter_configuration');
  $wordfilter_configs = $storage->loadMultiple();

  foreach ($wordfilter_configs as $key => $config) {
    $wordfilter_configs[$key] = $config->label();
  }

  $default = $entity->getThirdPartySetting('wordfilter', 'active_wordfilter_configs');
  $descriptions = [
    t('Choose the available Wordfilter configurations as active filters.'),
    t('The chosen filters will be applied on <strong>title</strong> and <strong>body</strong> displays.'),
  ];
  if ($account->hasPermission('access wordfilter configurations page')) {
    $descriptions[] = t('You can create and manage Wordfilter configurations at the <a target="_blank" href=":url">Wordfilter configuration page</a>.', [':url' => '/admin/config/wordfilter_configuration']);
  }
  if ($account->hasPermission('administer filters')) {
    $descriptions[] = t('For filtering on various text fields, enable Wordfilter configurations on your <a target="_blank" href=":url">text formats</a>.', [':url' => '/admin/config/content/formats']);
  }
  $form['display']['active_wordfilter_configs'] = [
    '#type' => 'select',
    '#title' => t('Active Wordfilter configurations'),
    '#options' => $wordfilter_configs,
    '#multiple' => TRUE,
    '#default_value' => !empty($default) ? $default : [],
    '#description' => \Drupal::theme()->render('item_list', ['items' => $descriptions]),
  ];

  $form['#entity_builders'][] = 'wordfilter_form_entity_form_builder';
}

/**
 * Entity builder for any entity form with Wordfilter display options.
 *
 * @param string $entity_type
 *   The entity type, e.g. 'node_type' or 'comment_type'.
 * @param \Drupal\Core\Config\Entity\ThirdPartySettingsInterface $entity
 *   The corresponding entity object, must implement ThirdPartySettingsInterface.
 * @param array &$form
 *   The form render array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function wordfilter_form_entity_form_builder($entity_type, $entity, &$form, FormStateInterface $form_state) {
  if ($entity instanceof ThirdPartySettingsInterface) {
    $active_configs = array_values(array_filter($form_state->getValue('active_wordfilter_configs')));
    $entity->setThirdPartySetting('wordfilter', 'active_wordfilter_configs', $active_configs);
  }
}

/**
 * Implements hook_entity_display_build_alter().
 *
 * @param array $build
 * @param array $context
 */
function wordfilter_entity_display_build_alter(&$build, $context) {
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $context['entity'];
  $type_id = $entity->getEntityTypeId();

  $fields = [];
  switch ($type_id) {
    case 'node':
      $fields = ['title', 'body'];
      break;
    case 'comment':
      $fields = ['subject', 'comment_body'];
      break;
    default:
      return;
  }
  
  /** @var \Drupal\Core\Config\Entity\ThirdPartySettingsInterface $type */
  $type = \Drupal::entityTypeManager()
    ->getStorage($type_id . '_type')->load($entity->bundle());

  $active_configs = $type->getThirdPartySetting('wordfilter', 'active_wordfilter_configs');
  if (empty($active_configs)) {
    return;
  }
  
  $wordfilter_configs = \Drupal::entityTypeManager()
    ->getStorage('wordfilter_configuration')->loadMultiple($active_configs);
  
  foreach ($fields as $field) {
    if (empty($build[$field])) {
      continue;
    }
    if ($build[$field][0]['#type'] == 'inline_template') {
      $text = $build[$field][0]['#context']['value'];
      foreach ($wordfilter_configs as $wordfilter_config) {
        $process = $wordfilter_config->getProcess();
        $text = $process->filterWords($text, $wordfilter_config);
      }
      $build[$field][0]['#context']['filtered'] = $text;
      $build[$field][0]['#template'] = '{{ filtered|nl2br }}';
    }
    elseif ($build[$field][0]['#type'] == 'processed_text') {
      $text = $build[$field][0]['#text'];
      foreach ($wordfilter_configs as $wordfilter_config) {
        $process = $wordfilter_config->getProcess();
        $text = $process->filterWords($text, $wordfilter_config);
      }
      $build[$field][0]['#text'] = $text;
    }
  }
}

/**
 * Implements template_preprocess_comment().
 */
function wordfilter_preprocess_comment(&$variables) {
  /** @var \Drupal\comment\CommentInterface $comment */
  $comment = $variables['elements']['#comment'];
  
  /** @var \Drupal\Core\Config\Entity\ThirdPartySettingsInterface $type */
  $type = \Drupal::entityTypeManager()
    ->getStorage('comment_type')->load($comment->bundle());
  
  $active_configs = $type->getThirdPartySetting('wordfilter', 'active_wordfilter_configs');
  if (empty($active_configs)) {
    return;
  }
  
  $wordfilter_configs = \Drupal::entityTypeManager()
    ->getStorage('wordfilter_configuration')->loadMultiple($active_configs);
  
  $text = $comment->getSubject();
  foreach ($wordfilter_configs as $wordfilter_config) {
    $process = $wordfilter_config->getProcess();
    $text = $process->filterWords($text, $wordfilter_config);
  }
  
  if (isset($comment->in_preview)) {
    $variables['title'] = Link::fromTextAndUrl($text, new Url('<front>'));
  }
  else {
    $uri = $comment->permalink();
    $attributes = $uri->getOption('attributes') ?: [];
    $attributes += ['class' => ['permalink'], 'rel' => 'bookmark'];
    $uri->setOption('attributes', $attributes);
    $variables['title'] = Link::fromTextAndUrl($text, $uri);
  }
}
